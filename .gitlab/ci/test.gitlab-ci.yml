test-shellcheck:
  stage: test
  image: koalaman/shellcheck-alpine
  needs: []
  script:
    - shellcheck src/build.sh

.test-build:
  stage: test
  image: "$BUILD_IMAGE_NAME"
  services:
    - "docker:${DOCKER_VERSION}-dind"
  tags:
    - gitlab-org-docker

test-dockerfile:
  extends: .test-build
  script:
    - cd "$CI_PROJECT_DIR/test/ruby_with_dockerfile"
    - /build/build.sh | tee /tmp/build-output
    - grep 'Building Dockerfile-based application...' /tmp/build-output
    - grep 'CI_APPLICATION_TAG' gl-auto-build-variables.env

test-dockerfile-with-buildkit:
  extends: test-dockerfile
  variables:
    DOCKER_BUILDKIT: 1
  script:
    - cd "$CI_PROJECT_DIR/test/ruby_with_dockerfile"
    - /build/build.sh | tee /tmp/build-output
    # Tests for the BuildKit style output
    - grep -q '^#[1-9]' /tmp/build-output

test-dockerfile-without-buildkit:
  extends: test-dockerfile
  variables:
    DOCKER_BUILDKIT: 0
  script:
    - cd "$CI_PROJECT_DIR/test/ruby_with_dockerfile"
    - /build/build.sh | tee /tmp/build-output
    # Tests for the absence of the BuildKit style output
    - grep -q '^#[1-9]' /tmp/build-output && exit 1 || exit 0

test-dockerfile-with-registry-cache:
  extends: test-dockerfile
  variables:
    DOCKER_BUILDKIT: 1
    AUTO_DEVOPS_BUILD_CACHE: registry
  script:
    - cd "$CI_PROJECT_DIR/test/ruby_with_dockerfile"
    - /build/build.sh | tee /tmp/build-output
    - grep 'writing config' /tmp/build-output
    - grep 'writing manifest' /tmp/build-output

test-dockerfile-with-inline-cache:
  extends: test-dockerfile
  variables:
    DOCKER_BUILDKIT: 1
    AUTO_DEVOPS_BUILD_CACHE: inline
  script:
    - cd "$CI_PROJECT_DIR/test/ruby_with_dockerfile"
    - /build/build.sh | tee /tmp/build-output
    - grep 'writing config' /tmp/build-output && exit 1 || exit 0
    - grep 'writing manifest' /tmp/build-output && exit 1 || exit 0

# This test is to prevent a regression until https://github.com/docker/engine/pull/339 is out
# See https://gitlab.com/gitlab-org/cluster-integration/auto-build-image/issues/13 for context
test-redhat-registry:
  extends: .test-build
  script:
    - cd "$CI_PROJECT_DIR/test/redhat_registry"
    - /build/build.sh

test-herokuish:
  extends: .test-build
  variables:
    AUTO_DEVOPS_BUILD_IMAGE_CNB_ENABLED: "false"
  script:
    - cd "$CI_PROJECT_DIR/test/ruby"
    - /build/build.sh | tee /tmp/build-output
    - grep 'Building Heroku-based application using gliderlabs/herokuish docker image...' /tmp/build-output

test-cnb:
  extends: .test-build
  script:
    - cd "$CI_PROJECT_DIR/test/ruby"
    - /build/build.sh | tee /tmp/build-output
    - grep 'Building Cloud Native Buildpack-based application with builder' /tmp/build-output
    - grep 'CI_APPLICATION_TAG' gl-auto-build-variables.env
  artifacts:
    reports:
      dotenv: test/ruby/gl-auto-build-variables.env

test-herokuish-with-buildkit:
  extends: test-herokuish
  variables:
    DOCKER_BUILDKIT: 1
  script:
    - cd "$CI_PROJECT_DIR/test/ruby"
    - /build/build.sh | tee /tmp/build-output
    # Tests for the BuildKit style output
    - grep -q '^#[1-9]' /tmp/build-output

test-herokuish-without-buildkit:
  extends: test-herokuish
  variables:
    DOCKER_BUILDKIT: 0
  script:
    - cd "$CI_PROJECT_DIR/test/ruby"
    - /build/build.sh | tee /tmp/build-output
    # Tests for the absence of the BuildKit style output
    - grep -q '^#[1-9]' /tmp/build-output && exit 1 || exit 0

test-herokuish-with-build-secrets:
  extends: test-herokuish
  variables:
    FORWARDED_VARIABLE_0: 'my forwarded variable 0'
    FORWARDED_VARIABLE_1: 'my forwarded variable 1'
    AUTO_DEVOPS_BUILD_IMAGE_FORWARDED_CI_VARIABLES: FORWARDED_VARIABLE_0,FORWARDED_VARIABLE_1
  script:
    - cd "$CI_PROJECT_DIR/test/ruby"
    # As this checks build output, we have to make sure layers are not
    # cached
    - echo "$RANDOM-$(date +%s)" > cache-miss
    - /build/build.sh | tee /tmp/build-output
    - grep 'Building Heroku-based application using gliderlabs/herokuish docker image...' /tmp/build-output
    - grep 'FORWARDED_VARIABLE_0="my forwarded variable 0"' /tmp/build-output
    - grep 'FORWARDED_VARIABLE_1="my forwarded variable 1"' /tmp/build-output

test-cnb-with-build-secrets:
  extends: .test-build
  variables:
    FORWARDED_VARIABLE_0: 'my forwarded variable 0'
    FORWARDED_VARIABLE_1: 'my forwarded variable 1'
    AUTO_DEVOPS_BUILD_IMAGE_FORWARDED_CI_VARIABLES: FORWARDED_VARIABLE_0,FORWARDED_VARIABLE_1
  script:
    - cd "$CI_PROJECT_DIR/test/ruby"
    - /build/build.sh | tee /tmp/build-output
    - grep 'Building Cloud Native Buildpack-based application with builder' /tmp/build-output
    - grep 'FORWARDED_VARIABLE_0="my forwarded variable 0"' /tmp/build-output
    - grep 'FORWARDED_VARIABLE_1="my forwarded variable 1"' /tmp/build-output

test-herokuish-with-buildpack-url:
  extends: test-herokuish
  variables:
    BUILDPACK_URL: 'https://github.com/HashNuke/heroku-buildpack-elixir.git#381ea508063bb20467702cf79c58babaedac12fd'
  script:
    - cd "$CI_PROJECT_DIR/test/elixir"
    # As this checks build output, we have to make sure layers are not
    # cached
    - echo "$RANDOM-$(date +%s)" > cache-miss
    - /build/build.sh | tee /tmp/build-output
    - grep 'Building Heroku-based application using gliderlabs/herokuish docker image...' /tmp/build-output
    - grep "Using default config from Elixir buildpack" /tmp/build-output

# This is a smoke test for kubernetes runners to avoid regressions like
# https://gitlab.com/gitlab-org/gitlab/-/issues/328403. It uses a runner
# installed on the project cluster "auto-build-image-ci-runners".
# The dind service in Jobs/Build.gitlab-ci.yml should mirror this one.
test-dockerfile-kubernetes-runner:
  extends: test-dockerfile
  variables:
    DOCKER_TLS_CERTDIR: ""
  services:
    - name: "docker:${DOCKER_VERSION}-dind"
      command: ['--tls=false', '--host=tcp://0.0.0.0:2375']
  tags:
    - kubernetes
  rules:
    - if: $CI_MERGE_REQUEST_IID && $CI_PROJECT_PATH == 'gitlab-org/cluster-integration/auto-build-image' && $CI_SERVER_HOST == "gitlab.com"

test-cnb-with-buildpack-url:
  extends: .test-build
  variables:
    BUILDPACK_URL: /tmp/elixir_buildpack
  before_script:
    # prepare CNB-compatible elixir buildpack
    - apk add curl
    - mkdir "$BUILDPACK_URL"
    - cd "$BUILDPACK_URL"
    - curl -L https://github.com/heroku/cnb-shim/releases/download/v0.2/cnb-shim-v0.2.tgz | tar xz
    - |
      cat > buildpack.toml << TOML
      api = "0.2"

      [buildpack]
      id = "hashnuke.elixir"
      version = "0.1"
      name = "Elixir"

      [[stacks]]
      id = "heroku-18"
      TOML
    - bin/install buildpack.toml https://buildpack-registry.s3.amazonaws.com/buildpacks/hashnuke/elixir.tgz
  script:
    - cd "$CI_PROJECT_DIR/test/elixir"
    - /build/build.sh | tee /tmp/build-output
    - grep 'Building Cloud Native Buildpack-based application with builder' /tmp/build-output
    - grep "Using default config from Elixir buildpack" /tmp/build-output

test-cnb-with-one-volume:
  extends: .test-build
  variables:
    BUILDPACK_URL: .
    SHARED_PATH: $CI_PROJECT_DIR/shared
    BUILDPACK_VOLUMES: $CI_PROJECT_DIR/shared:/data
  before_script:
    - mkdir -p $SHARED_PATH
    - echo "Successfully mounted a volume" > $SHARED_PATH/test
  script:
    - cd "$CI_PROJECT_DIR/test/shell_with_volume"
    - /build/build.sh | tee /tmp/build-output
    - grep 'Successfully mounted a volume' /tmp/build-output

test-cnb-with-multiple-volumes:
  extends: .test-build
  variables:
    BUILDPACK_URL: .
    SHARED_PATH: $CI_PROJECT_DIR/shared
    BUILDPACK_VOLUMES: "${SHARED_PATH}1:/volumes/1:ro|${SHARED_PATH}2:/volumes/2:ro|${SHARED_PATH}3:/volumes/3:ro|${SHARED_PATH}4:/volumes/4:ro"
      # how do we know what we're reading back what was written in before_script?
    UNIQUE: "$CI_JOB_ID"
  before_script:
    - mkdir -p ${SHARED_PATH}1 ${SHARED_PATH}2 ${SHARED_PATH}3 ${SHARED_PATH}4
    - echo "first volume ${UNIQUE}" > ${SHARED_PATH}1/test
    - echo "second volume ${UNIQUE}" > ${SHARED_PATH}2/test
    - echo "third volume ${UNIQUE}" > ${SHARED_PATH}3/test
    - echo "fourth volume ${UNIQUE}" > ${SHARED_PATH}4/test
  script:
    - cd "$CI_PROJECT_DIR/test/shell_with_multiple_volumes"
    - /build/build.sh | tee /tmp/build-output
    - grep "first volume ${UNIQUE}" /tmp/build-output
    - grep "second volume ${UNIQUE}" /tmp/build-output
    - grep "third volume ${UNIQUE}" /tmp/build-output
    - grep "fourth volume ${UNIQUE}" /tmp/build-output

test-custom-dockerfile:
  extends: .test-build
  variables:
    DOCKERFILE_PATH: "build/Dockerfile"
  script:
    - cd "$CI_PROJECT_DIR/test/ruby_with_custom_dockerfile"
    - /build/build.sh | tee /tmp/build-output
    - grep "Building Dockerfile-based application using 'build/Dockerfile'" /tmp/build-output

test-custom-dockerfile-should-fail:
  extends: .test-build
  variables:
    DOCKERFILE_PATH: "non-existing-file"
  script:
    - cd "$CI_PROJECT_DIR/test/ruby_with_custom_dockerfile"
    - /build/build.sh && exit 1 || exit 0

test-dependency-proxy:
  extends: .test-build
  variables:
    DOCKERFILE_PATH: "with_dependency_proxy/Dockerfile"
  script:
    - cd "$CI_PROJECT_DIR/test/ruby_with_dockerfile"
    - /build/build.sh | tee /tmp/build-output
    - grep "Building Dockerfile-based application using 'with_dependency_proxy/Dockerfile'" /tmp/build-output
  rules:
    - if: $CI_MERGE_REQUEST_IID && $CI_PROJECT_PATH == 'gitlab-org/cluster-integration/auto-build-image' && $CI_SERVER_HOST == "gitlab.com"

test-rspec:
  stage: test
  image: "$BUILD_IMAGE_NAME"
  before_script:
    - gem install --no-document bundler
    - bundle install --without rubocop
  script:
    - bundle exec rspec

test-rubocop:
  stage: test
  image: "$BUILD_IMAGE_NAME"
  before_script:
    - gem install --no-document bundler
    - bundle install --without test
  script:
    - bundle exec rubocop Gemfile src spec

commitlint:
  stage: test
  image: node:12
  needs: []
  before_script:
    - npm install
  script:
    - npx --quiet commitlint --from="$CI_MERGE_REQUEST_DIFF_BASE_SHA" --help-url 'https://gitlab.com/gitlab-org/cluster-integration/auto-build-image#git-commit-guidelines'
  rules:
    - if: "$CI_MERGE_REQUEST_EVENT_TYPE != 'merge_train' && $CI_MERGE_REQUEST_DIFF_BASE_SHA"
